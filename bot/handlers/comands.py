import asyncio
from icmplib import async_ping
from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aioping
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from handlers.logic import (insert_data, list_user_ip, delete_data, update_user_ip, list_user_ip_by_id)

# from handlers.photos.photo_manager import photo_clas

router = Router()


class Form(StatesGroup):
    ip = State()
    ip_description = State()
    delete_ip = State()
    change_ip = State()
    change_ip_adress = State()
    turn_on = State()
    turn_off = State()
    change_ip_description = State()


"""–õ–æ–≥—ñ–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    text = "–ü—Ä–∏–≤—ñ—Ç —è —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —á–∏ —î —Å–≤—ñ—Ç–ª–æ –≤ —Ç–≤–æ—î–º—É –¥–æ–º—ñ.\n–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ —Ç–∏ –º–æ–∂–µ—à —É –≤–∫–ª–∞–¥—Ü—ñ –î–æ–ø–æ–º–æ–≥–∞"
    await message.answer(text)
    await asyncio.sleep(1)
    await cmd_menu(message)


@router.message(lambda message: message.text == "–ú–µ–Ω—é")
async def cmd_menu(message: types.Message):
    text1 = "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –¥—ñ—é"

    kb = [
        [KeyboardButton(text="–£–≤—ñ–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞"), KeyboardButton(text="–í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞")],
        [KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞"), KeyboardButton(text="–ú–æ—ó ip –∞–¥—Ä–µ—Å–∏")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)


@router.message(lambda message: message.text == "–î–æ–ø–æ–º–æ–≥–∞")
async def process_with_puree(message: types.Message):
    text1 = "–ë–æ—Ç –ø—Ä–∞—Ü—é—î –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É —Ç–æ–≥–æ —â–æ –≤–∏ –≤–∫–∞–∑—É—î—Ç–µ —Å–≤–æ—é –≤–ª–∞—Å–Ω—É ip –∞–¥—Ä–µ—Å—É, —ñ –±–æ—Ç –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –ø–æ –Ω—ñ–π —Å–≤—ñ—Ç–ª–æ. –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ipv4 16.211.99.114"
    text2 = "\n–í –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤–∞—à–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ip –∞–¥—Ä–µ—Å–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∞ —Ç–æ–º—É –±–∞–∂–∞–Ω–æ –ø—Ä–∏–Ω–∞–π–Ω—ñ —Ä–∞–∑ –≤ —Ç–∏–∂–¥–µ–Ω—å —ó –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏, –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –±–æ—Ç –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –Ω–µ —Ç–æ—á–Ω–æ."
    text3 = "\n–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É @ds0903\n–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–º —Ü–µ –Ω–µ –æ–±–æ–≤—è–∑–∫–æ–≤–æ –∞–ª–µ –±–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, mono 9999.1111.3333.4444"
    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text1+text2)
    await asyncio.sleep(2)
    await message.answer("üë®‚Äçüíª")
    await asyncio.sleep(0.10)
    await message.answer(text3, reply_markup=keyboard)


@router.message(lambda message: message.text == "–ú–æ—ó ip –∞–¥—Ä–µ—Å–∏")
async def cmd_ip(message: types.Message, state: FSMContext):
    text1 = "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –¥—ñ—é"

    kb = [
        [KeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ ip"), KeyboardButton(text="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip")],
        [KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ ip"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–æ—ó—Ö ip –∞–¥—Ä–µ—Å")],
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)

    @router.message(lambda message: message.text == "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip")
    async def set_ip(message: types.Message):
        kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")],]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ip –∞–¥—Ä–µ—Å—É —è–∫—É –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ ipv4\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 38.0.101.76\n\n–î—ñ–∑–Ω–∞—Ç–∏—Å—å —Å–≤–æ—é ip –∞–¥—Ä–µ—Å—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—à–æ–≤—à–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://whatismyipaddress.com/ru/index ", reply_markup=keyboard)
        await state.set_state(Form.ip)

    @router.message(Form.ip)
    async def ip(message: types.Message):
        if message.text == "–ù–∞–∑–∞–¥":
            await state.clear()
            await cmd_ip(message, state)
        else:
            ip = message.text
            if len(ip) > 12:
                await message.answer("–ó–∞–≤–µ–ª–∏–∫–∏–π ip –∞–¥—Ä–µ—Å. –°–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ —â–µ —Ä–∞–∑")
                await state.clear()
                await set_ip(message)
            else:
                await state.update_data(ip=ip)
                await message.reply(
                    f"ip –∞–¥—Ä–µ—Å–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞: {ip}"
                )
                await asyncio.sleep(1)
                await message.reply(
                f"–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–ø–µ—Ä –æ–ø–∏—Å ip –∞–¥—Ä–µ—Å–∏\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ë—É–¥–∏–Ω–æ–∫"
                )
                await state.set_state(Form.ip_description)

    @router.message(Form.ip_description)
    async def set_ip_description(message: types.Message):
        user_id = message.from_user.id
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        username = message.from_user.username
        language_code = message.from_user.language_code
        is_premium = message.from_user.is_premium
        ip_description = message.text
        await state.update_data(ip_description1=ip_description)
        await message.reply(
            f"–æ–ø–∏—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ: {ip_description}"
        )
        user_data = await state.get_data()
        ip = user_data["ip"]
        data_full = (ip, ip_description)
        await insert_data(user_id, ip, ip_description, first_name, last_name, username, language_code, is_premium,)
        await asyncio.sleep(1)
        await message.answer(f"–î–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω–æ:{data_full}")
        await state.clear()
        await asyncio.sleep(1)
        await cmd_ip(message, state)

    @router.message(lambda message: message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ ip")
    async def delete_ip(message: types.Message):
        kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")],]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä ip –∞–¥—Ä–µ—Å—É —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ ‚Ññ3 ", reply_markup=keyboard)
        data = message.from_user.id
        result = await list_user_ip(data)
        await asyncio.sleep(0.5)
        try:
            for i in result:
                id, user_id, ip, description, first_name, last_name, username, language_code, is_premium = i
                result1 = f"‚Ññ: {id}, ip –∞–¥—Ä–µ—Å: {ip}, –û–ø–∏—Å: {description}"
                await message.answer(result1)
                await asyncio.sleep(0.5)
            await state.set_state(Form.delete_ip)
        except TypeError:
            await asyncio.sleep(0.5)
            await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–∏—Ö ip –∞–¥—Ä–µ—Å ;(\n–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É ip –∞–¥—Ä–µ—Å—É –≤ –≤–∫–ª–∞–¥—Ü—ñ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip")
            await state.clear()
            await asyncio.sleep(1)
            await cmd_ip(message, state)

    @router.message(Form.delete_ip)
    async def delete_ip1(message: types.Message):
        if message.text == "–ù–∞–∑–∞–¥":
            await state.clear()
            await cmd_ip(message, state)
        else:
            id1 = message.text
            data = message.from_user.id
            result = await list_user_ip(data)
            for i in result:
                id, user_id, ip, description, first_name, last_name, username, language_code, is_premium = i
                id1 = int(id1)
            if id1 != id:
                await message.answer("–¢–∞–∫–æ–≥–æ ip –∞–¥—Ä–µ—Å—É –Ω–µ —ñ—Å–Ω—É—î")
                await asyncio.sleep(1)
                await state.clear()
                await delete_ip(message)
            elif id1 == id:
                data1 = await delete_data(id1)
                await message.answer(data1)
                await asyncio.sleep(1)
                await state.clear()
                await cmd_ip(message, state)

    @router.message(lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ ip")
    async def change_ip(message: types.Message):
        kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")],]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä ip –∞–¥—Ä–µ—Å—É —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏", reply_markup=keyboard)

        data = message.from_user.id
        result = await list_user_ip(data)
        
        try:
            for i in result:
                id, user_id, ip, description, first_name, last_name, username, language_code, is_premium = i
                result1 = f"‚Ññ: {id}, ip –∞–¥—Ä–µ—Å: {ip}, –û–ø–∏—Å: {description}"
                await asyncio.sleep(0.5)
                await message.answer(result1)
            else:
                await state.set_state(Form.change_ip)
        except TypeError:
            await asyncio.sleep(0.5)
            await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–∏—Ö ip –∞–¥—Ä–µ—Å ;(\n–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É ip –∞–¥—Ä–µ—Å—É –≤ –≤–∫–ª–∞–¥—Ü—ñ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip")
            await state.clear()
            await asyncio.sleep(1)
            await cmd_ip(message, state)

    @router.message(Form.change_ip)
    async def change_ip1(message: types.Message):
        if message.text == "–ù–∞–∑–∞–¥":
            await state.clear()
            await cmd_ip(message, state)
        else:
            id1 = message.text
            data = message.from_user.id
            result = await list_user_ip(data)
            for i in result:
                id, user_id, ip, description, first_name, last_name, username, language_code, is_premium = i
                id1 = int(id1)
            if id != id1:
                await message.answer("–¢–∞–∫–æ–≥–æ ip –∞–¥—Ä–µ—Å—É –Ω–µ —ñ—Å–Ω—É—î")
                await state.clear()
                await asyncio.sleep(1)
                await change_ip(message)
            elif id == id1:
                await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–π ip –∞–¥—Ä–µ—Å")
                await state.update_data(id1=id1)
                await asyncio.sleep(1)
                await state.set_state(Form.change_ip_adress)

    @router.message(Form.change_ip_adress)
    async def change_ip2(message: types.Message):
        ip = message.text
        await state.update_data(ip=ip)
        await message.reply(f"ip –∞–¥—Ä–µ—Å–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞: {ip}")
        await asyncio.sleep(1)
        await message.reply(
        f"–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–ø–µ—Ä –æ–ø–∏—Å ip –∞–¥—Ä–µ—Å–∏\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ë—É–¥–∏–Ω–æ–∫"
        )
        await state.set_state(Form.change_ip_description)
        
    @router.message(Form.change_ip_description)
    async def change_ip3(message: types.Message):
        ip_description = message.text
        user_data = await state.get_data()
        ip = user_data["ip"]
        id = user_data["id1"]
        await message.reply(f"–æ–ø–∏—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ: {ip_description}")
        data_full = (id, ip, ip_description)
        await update_user_ip(data_full)
        await asyncio.sleep(1)
        await message.answer(f"–ù–æ–≤–∞ ip –∞–¥—Ä–µ—Å–∞: {data_full}")
        await state.clear()
        await asyncio.sleep(1)
        await cmd_ip(message, state)

    @router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –º–æ—ó—Ö ip –∞–¥—Ä–µ—Å")
    async def list_my_ip(message: types.Message):
        kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")],]
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö ip –∞–¥—Ä–µ—Å", reply_markup=keyboard)

        data = message.from_user.id
        result = await list_user_ip(data)
        if result:
            for i in result:
                id, user_id, ip, description, first_name, last_name, username, language_code, is_premium = i
                result1 = f"‚Ññ: {id}, ip –∞–¥—Ä–µ—Å: {ip}, –û–ø–∏—Å: {description}"
                await asyncio.sleep(0.5)
                await message.answer(result1)
            await asyncio.sleep(0.5)
            await cmd_ip(message, state)
        else:
            await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–∏—Ö ip –∞–¥—Ä–µ—Å ;(\n–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É ip –∞–¥—Ä–µ—Å—É –≤ –≤–∫–ª–∞–¥—Ü—ñ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip")
            await state.clear()
            await asyncio.sleep(1)
            await cmd_ip(message, state)


@router.message(lambda message: message.text == "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞")
async def turn_on(message: types.Message, state: FSMContext):
    kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")],]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    # await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å ‚Ññ ip –∞–¥—Ä–µ—Å–∏ —è–∫—É –±–∞–∂–∞—î—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏", reply_markup=keyboard)
    data = message.from_user.id
    result = await list_user_ip(data)
    if result:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å ‚Ññ ip –∞–¥—Ä–µ—Å–∏ —è–∫—É –±–∞–∂–∞—î—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏", reply_markup=keyboard)
        for i in result:
            id, user_id, ip, description, first_name, last_name, username, language_code, is_premium = i
            result1 = f"‚Ññ: {id}, ip –∞–¥—Ä–µ—Å: {ip}, –û–ø–∏—Å: {description}"
            await asyncio.sleep(0.5)
            await message.answer(result1)
        await state.set_state(Form.turn_on)
    else:
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–∏—Ö ip –∞–¥—Ä–µ—Å ;(\n–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É ip –∞–¥—Ä–µ—Å—É –≤ –≤–∫–ª–∞–¥—Ü—ñ (–°–ø–∏—Å–æ–∫ ip –∞–¥—Ä–µ—Å -> –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip)")
        await state.clear()
        await asyncio.sleep(1)
        await cmd_ip(message, state)

    @router.message(Form.turn_on)
    async def turn_on2(message: types.Message, state: FSMContext):
        data = message.text
        result = await list_user_ip_by_id(data)
        await message.reply(f"–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏: {result}")
        # user_data = await state.get_data()
        # id1 = user_data["id1"]
        # await message.reply(f"–í–∏ –≤–≤–µ–ª–∏: {id}")
        # if id == "–ù–∞–∑–∞–¥":
        #     await state.clear()

# @router.message(lambda message: message.text == "–í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞")
# async def turn_off(message: types.Message, state: FSMContext):
#     kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")],]
#     keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
#     data = message.from_user.id
#     result = await list_user_ip(data)
#     if result:
#         await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å ‚Ññ ip –∞–¥—Ä–µ—Å–∏ —è–∫—É –±–∞–∂–∞—î—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏", reply_markup=keyboard)
#         for i in result:
#             id, user_id, ip, description, first_name, last_name, username, language_code, is_premium = i
#             result1 = f"‚Ññ: {id}, ip –∞–¥—Ä–µ—Å: {ip}, –û–ø–∏—Å: {description}"
#             await asyncio.sleep(0.5)
#             await message.answer(result1)
#         await asyncio.sleep(0.5)
#         await cmd_ip(message, state)
#     else:
#         await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–∏—Ö ip –∞–¥—Ä–µ—Å ;(\n–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É ip –∞–¥—Ä–µ—Å—É –≤ –≤–∫–ª–∞–¥—Ü—ñ (–°–ø–∏—Å–æ–∫ ip –∞–¥—Ä–µ—Å -> –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip)")
#         await state.clear()
#         await asyncio.sleep(1)
#         await cmd_ip(message, state)


# https://whatismyipaddress.com/ru/index

#########
    # ip_address = "46.211.95.114"
    # async def check_light(ip_address): #user_id, 
    #     while True:
    #         try:
    #             delay = await aioping.ping(ip_address)
    #             await message.answer(f"–°–≤–µ—Ç –µ—Å—Ç—å! –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} –º—Å")
    #         except TimeoutError:
    #             await message.answer("–°–≤–µ—Ç–∞ –Ω–µ—Ç!")
    #         await asyncio.sleep(5) 
    # await check_light(ip_address)
###########

# def set_ip(update: Update, context: CallbackContext) -> None:
#     user_id = update.message.chat_id
#     ip_address = context.args[0]
#     user_ips[user_id] = ip_address
#     update.message.reply_text(f'IP-–∞–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ip_address}')
#     check_light(user_id, ip_address, context)

# def check_light(user_id, ip_address, context: CallbackContext) -> None:
#     def ping_ip():
#         while True:
#             host = ping(ip_address, count=1, interval=1)
#             if host.is_alive:
#                 context.bot.send_message(chat_id=user_id, text="–°–≤–µ—Ç –µ—Å—Ç—å!")
#             else:
#                 context.bot.send_message(chat_id=user_id, text="–°–≤–µ—Ç–∞ –Ω–µ—Ç!")
#             threading.Event().wait(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∏–Ω–≥–æ–º

#     thread = threading.Thread(target=ping_ip)
#     thread.start()