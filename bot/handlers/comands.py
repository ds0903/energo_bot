import asyncio

from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from handlers.logic import (insert_data)
# from handlers.photos.photo_manager import photo_clas

router = Router()


class Form(StatesGroup):
    ip = State()
    ip_description = State()


"""–õ–æ–≥—ñ–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    text = "–ü—Ä–∏–≤—ñ—Ç —è —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —á–∏ —î —Å–≤—ñ—Ç–ª–æ –≤ —Ç–≤–æ—î–º—É –¥–æ–º—ñ.\n–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ —Ç–∏ –º–æ–∂–µ—à —É –≤–∫–ª–∞–¥—Ü—ñ –î–æ–ø–æ–º–æ–≥–∞"
    await message.answer(text)
    await asyncio.sleep(1)
    await cmd_menu(message)


@router.message(lambda message: message.text == "–ú–µ–Ω—é")
async def cmd_menu(message: types.Message):
    text1 = "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –¥—ñ—é"

    kb = [
        [KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞"), KeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ip")],
        # [KeyboardButton(text="–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ —ñ–Ω–≥—Ä—ñ–¥—ñ—î–Ω—Ç–∞–º–∏")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)



@router.message(lambda message: message.text == "–î–æ–ø–æ–º–æ–≥–∞")
async def process_with_puree(message: types.Message):
    text1 = "–ë–æ—Ç –ø—Ä–∞—Ü—é—î –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É —Ç–æ–≥–æ —â–æ –≤–∏ –≤–∫–∞–∑—É—î—Ç–µ —Å–≤–æ—é –≤–ª–∞—Å–Ω—É ip –∞–¥—Ä–µ—Å—É, —ñ –±–æ—Ç –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –ø–æ –Ω—ñ–π –∫–æ–ª–∏ —î —Å–≤—ñ—Ç–ª–æ –∞ –∫–æ–ª–∏ –Ω–µ–º–∞—î. "
    text2 = "\n–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É @ds0903\n–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–º —Ü–µ –Ω–µ –æ–±–æ–≤—è–∑–∫–æ–≤–æ –∞–ª–µ –±–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, mono 9999111133334444"
    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(text1)
    await asyncio.sleep(2)
    await message.answer("üë®‚Äçüíª")
    await asyncio.sleep(0.25)
    await message.answer(text2, reply_markup=keyboard)



@router.message(lambda message: message.text == "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ip")
async def cmd_ip(message: types.Message, state: FSMContext):
    text1 = "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –¥—ñ—é"

    kb = [
        [KeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ ip"), KeyboardButton(text="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip")],
        [KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ ip"), KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞")],
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await asyncio.sleep(1)
    await message.answer(text1, reply_markup=keyboard)
    


    @router.message(lambda message: message.text == "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ip")
    async def set_ip(message: types.Message):
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ip –∞–¥—Ä–µ—Å—É —è–∫—É –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏")
        await state.set_state(Form.ip)
 
 
    @router.message(Form.ip)
    async def set_ip(message: types.Message):
        ip = message.text
        await state.update_data(ip1=ip)
        await message.reply(
            f"ip –∞–¥—Ä–µ—Å–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞: {ip}"
        )
        await asyncio.sleep(1)
        await message.reply(
        f"–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–ø–µ—Ä –æ–ø–∏—Å ip –∞–¥—Ä–µ—Å–∏\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ë—É–¥–∏–Ω–æ–∫"
        )
        await state.set_state(Form.ip_description)
        
    @router.message(Form.ip_description)
    async def set_ip(message: types.Message):

        ip_description = message.text
        await state.update_data(ip_description1=ip_description)
        await message.reply(
            f"–æ–ø–∏—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ: {ip_description}"
        )
        user_data = await state.get_data()
        about1 = user_data["about1"]
        data_full = (about1, about2)
        await message.answer(f"{data_full}")





# https://whatismyipaddress.com/ru/index





# def set_ip(update: Update, context: CallbackContext) -> None:
#     user_id = update.message.chat_id
#     ip_address = context.args[0]
#     user_ips[user_id] = ip_address
#     update.message.reply_text(f'IP-–∞–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ip_address}')
#     check_light(user_id, ip_address, context)

# def check_light(user_id, ip_address, context: CallbackContext) -> None:
#     def ping_ip():
#         while True:
#             host = ping(ip_address, count=1, interval=1)
#             if host.is_alive:
#                 context.bot.send_message(chat_id=user_id, text="–°–≤–µ—Ç –µ—Å—Ç—å!")
#             else:
#                 context.bot.send_message(chat_id=user_id, text="–°–≤–µ—Ç–∞ –Ω–µ—Ç!")
#             threading.Event().wait(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∏–Ω–≥–æ–º

#     thread = threading.Thread(target=ping_ip)
#     thread.start()